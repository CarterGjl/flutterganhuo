// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class SendMessage {
  String? event;
  String? params;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['event'] = event;
    pigeonMap['params'] = params;
    return pigeonMap;
  }

  static SendMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SendMessage()
      ..event = pigeonMap['event'] as String?
      ..params = pigeonMap['params'] as String?;
  }
}

class CallbackMessage {
  String? event;
  String? params;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['event'] = event;
    pigeonMap['params'] = params;
    return pigeonMap;
  }

  static CallbackMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CallbackMessage()
      ..event = pigeonMap['event'] as String?
      ..params = pigeonMap['params'] as String?;
  }
}

class BaseCommand {
  int? seq;
  String? command;
  Map<String?, String?>? commandHead;
  String? superCommand;
  String? version;
  double? delayInMillis;
  double? timeoutInMillis;
  String? commandBody;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['seq'] = seq;
    pigeonMap['command'] = command;
    pigeonMap['commandHead'] = commandHead;
    pigeonMap['superCommand'] = superCommand;
    pigeonMap['version'] = version;
    pigeonMap['delayInMillis'] = delayInMillis;
    pigeonMap['timeoutInMillis'] = timeoutInMillis;
    pigeonMap['commandBody'] = commandBody;
    return pigeonMap;
  }

  static BaseCommand decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return BaseCommand()
      ..seq = pigeonMap['seq'] as int?
      ..command = pigeonMap['command'] as String?
      ..commandHead = (pigeonMap['commandHead'] as Map<Object?, Object?>?)?.cast<String?, String?>()
      ..superCommand = pigeonMap['superCommand'] as String?
      ..version = pigeonMap['version'] as String?
      ..delayInMillis = pigeonMap['delayInMillis'] as double?
      ..timeoutInMillis = pigeonMap['timeoutInMillis'] as double?
      ..commandBody = pigeonMap['commandBody'] as String?;
  }
}

class BaseResponse {
  Map<String?, String?>? responseHead;
  String? superCommand;
  String? command;
  String? commandBody;
  String? type;
  String? version;
  int? seq;
  String? contentType;
  int? code;
  int? contentLength;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['responseHead'] = responseHead;
    pigeonMap['superCommand'] = superCommand;
    pigeonMap['command'] = command;
    pigeonMap['commandBody'] = commandBody;
    pigeonMap['type'] = type;
    pigeonMap['version'] = version;
    pigeonMap['seq'] = seq;
    pigeonMap['contentType'] = contentType;
    pigeonMap['code'] = code;
    pigeonMap['contentLength'] = contentLength;
    return pigeonMap;
  }

  static BaseResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return BaseResponse()
      ..responseHead = (pigeonMap['responseHead'] as Map<Object?, Object?>?)?.cast<String?, String?>()
      ..superCommand = pigeonMap['superCommand'] as String?
      ..command = pigeonMap['command'] as String?
      ..commandBody = pigeonMap['commandBody'] as String?
      ..type = pigeonMap['type'] as String?
      ..version = pigeonMap['version'] as String?
      ..seq = pigeonMap['seq'] as int?
      ..contentType = pigeonMap['contentType'] as String?
      ..code = pigeonMap['code'] as int?
      ..contentLength = pigeonMap['contentLength'] as int?;
  }
}

class _Api2HostCodec extends StandardMessageCodec {
  const _Api2HostCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is SendMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return SendMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class Api2Host {
  /// Constructor for [Api2Host].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  Api2Host({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _Api2HostCodec();

  Future<void> toHostMessage(SendMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api2Host.toHostMessage', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _Api2FlutterCodec extends StandardMessageCodec {
  const _Api2FlutterCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CallbackMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return CallbackMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class Api2Flutter {
  static const MessageCodec<Object?> codec = _Api2FlutterCodec();

  void toFlutterMessage(CallbackMessage message);
  static void setup(Api2Flutter? api) {
    {
      const BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.Api2Flutter.toFlutterMessage', codec);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.Api2Flutter.toFlutterMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CallbackMessage? arg_message = args[0] as CallbackMessage?;
          assert(arg_message != null, 'Argument for dev.flutter.pigeon.Api2Flutter.toFlutterMessage was null, expected non-null CallbackMessage.');
          api.toFlutterMessage(arg_message!);
          return;
        });
      }
    }
  }
}

class _TCP2HostCodec extends StandardMessageCodec {
  const _TCP2HostCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BaseCommand) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return BaseCommand.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class TCP2Host {
  /// Constructor for [TCP2Host].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TCP2Host({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _TCP2HostCodec();

  Future<void> sendCommand(BaseCommand arg_baseCommand) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.TCP2Host.sendCommand', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_baseCommand]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<int> getCommandSeq() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.TCP2Host.getCommandSeq', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }
}

class _TCP2FlutterCodec extends StandardMessageCodec {
  const _TCP2FlutterCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BaseResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return BaseResponse.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class TCP2Flutter {
  static const MessageCodec<Object?> codec = _TCP2FlutterCodec();

  void onTCPResponse(BaseResponse message);
  static void setup(TCP2Flutter? api) {
    {
      const BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.TCP2Flutter.onTCPResponse', codec);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.TCP2Flutter.onTCPResponse was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BaseResponse? arg_message = args[0] as BaseResponse?;
          assert(arg_message != null, 'Argument for dev.flutter.pigeon.TCP2Flutter.onTCPResponse was null, expected non-null BaseResponse.');
          api.onTCPResponse(arg_message!);
          return;
        });
      }
    }
  }
}
